// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Form Component should render input field with no validation 1`] = `
<Form
  action="/"
  className=""
  debug={true}
  formWrapperProps={Object {}}
  initialValues={
    Object {
      "email": "",
      "typeOfUser": "",
      "username": "",
    }
  }
  validate={[Function]}
  validateOnBlur={true}
  validateOnChange={true}
  validationSchema={null}
  yupValidationSchema={null}
>
  <Formik
    enableReinitialize={false}
    initialValues={
      Object {
        "email": "",
        "typeOfUser": "",
        "username": "",
      }
    }
    isInitialValid={false}
    render={[Function]}
    validate={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
    validationSchema={null}
  >
    <Form
      noValidate={true}
    >
      <Component
        formik={
          Object {
            "dirty": false,
            "errors": Object {},
            "handleBlur": [Function],
            "handleChange": [Function],
            "handleReset": [Function],
            "handleSubmit": [Function],
            "initialValues": Object {
              "email": "",
              "typeOfUser": "",
              "username": "",
            },
            "isSubmitting": false,
            "isValid": false,
            "isValidating": false,
            "registerField": [Function],
            "resetForm": [Function],
            "setError": [Function],
            "setErrors": [Function],
            "setFieldError": [Function],
            "setFieldTouched": [Function],
            "setFieldValue": [Function],
            "setFormikState": [Function],
            "setStatus": [Function],
            "setSubmitting": [Function],
            "setTouched": [Function],
            "setValues": [Function],
            "status": undefined,
            "submitCount": 0,
            "submitForm": [Function],
            "touched": Object {},
            "unregisterField": [Function],
            "validate": [Function],
            "validateField": [Function],
            "validateForm": [Function],
            "validateOnBlur": true,
            "validateOnChange": true,
            "validationSchema": null,
            "values": Object {
              "email": "",
              "typeOfUser": "",
              "username": "",
            },
          }
        }
        noValidate={true}
      >
        <form
          noValidate={true}
          onReset={[Function]}
          onSubmit={[Function]}
        >
          <div>
            <FieldInput
              label="User Name"
              name="username"
              type="text"
            >
              <FieldInput
                className="FieldInput-sc-1g6jjxa-0 gGDhvv"
                fieldProps={Object {}}
                label="User Name"
                labelProps={Object {}}
                name="username"
                placeholder=""
                type="text"
                value=""
              >
                <div
                  className="FieldInput-sc-1g6jjxa-0 gGDhvv"
                >
                  <Label
                    className=""
                  >
                    <label
                      className=""
                    >
                      User Name
                    </label>
                  </Label>
                  <FormikConnect(FieldInner)
                    name="username"
                    render={[Function]}
                    type="text"
                  >
                    <FieldInner
                      formik={
                        Object {
                          "dirty": false,
                          "errors": Object {},
                          "handleBlur": [Function],
                          "handleChange": [Function],
                          "handleReset": [Function],
                          "handleSubmit": [Function],
                          "initialValues": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                          "isSubmitting": false,
                          "isValid": false,
                          "isValidating": false,
                          "registerField": [Function],
                          "resetForm": [Function],
                          "setError": [Function],
                          "setErrors": [Function],
                          "setFieldError": [Function],
                          "setFieldTouched": [Function],
                          "setFieldValue": [Function],
                          "setFormikState": [Function],
                          "setStatus": [Function],
                          "setSubmitting": [Function],
                          "setTouched": [Function],
                          "setValues": [Function],
                          "status": undefined,
                          "submitCount": 0,
                          "submitForm": [Function],
                          "touched": Object {},
                          "unregisterField": [Function],
                          "validate": [Function],
                          "validateField": [Function],
                          "validateForm": [Function],
                          "validateOnBlur": true,
                          "validateOnChange": true,
                          "validationSchema": null,
                          "values": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                        }
                      }
                      name="username"
                      render={[Function]}
                      type="text"
                    >
                      <Input
                        name="username"
                        onBlur={[Function]}
                        onChange={[Function]}
                        placeholder=""
                        type="text"
                        value=""
                      >
                        <Input
                          ariaLabel=""
                          className="Input-qknnxd-0 fKPfiK"
                          name="username"
                          onBlur={[Function]}
                          onChange={[Function]}
                          placeholder=""
                          type="text"
                          value=""
                        >
                          <input
                            aria-label=""
                            className="Input-qknnxd-0 fKPfiK"
                            name="username"
                            onBlur={[Function]}
                            onChange={[Function]}
                            placeholder=""
                            type="text"
                            value=""
                          />
                        </Input>
                      </Input>
                    </FieldInner>
                  </FormikConnect(FieldInner)>
                  <FormikConnect(ErrorMessageImpl)
                    component={[Function]}
                    name="username"
                  >
                    <ErrorMessageImpl
                      component={[Function]}
                      formik={
                        Object {
                          "dirty": false,
                          "errors": Object {},
                          "handleBlur": [Function],
                          "handleChange": [Function],
                          "handleReset": [Function],
                          "handleSubmit": [Function],
                          "initialValues": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                          "isSubmitting": false,
                          "isValid": false,
                          "isValidating": false,
                          "registerField": [Function],
                          "resetForm": [Function],
                          "setError": [Function],
                          "setErrors": [Function],
                          "setFieldError": [Function],
                          "setFieldTouched": [Function],
                          "setFieldValue": [Function],
                          "setFormikState": [Function],
                          "setStatus": [Function],
                          "setSubmitting": [Function],
                          "setTouched": [Function],
                          "setValues": [Function],
                          "status": undefined,
                          "submitCount": 0,
                          "submitForm": [Function],
                          "touched": Object {},
                          "unregisterField": [Function],
                          "validate": [Function],
                          "validateField": [Function],
                          "validateForm": [Function],
                          "validateOnBlur": true,
                          "validateOnChange": true,
                          "validationSchema": null,
                          "values": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                        }
                      }
                      name="username"
                    />
                  </FormikConnect(ErrorMessageImpl)>
                </div>
              </FieldInput>
            </FieldInput>
          </div>
          <Button
            primary={true}
            type="submit"
          >
            <Button
              ariaLabel=""
              className="Button-sc-1ea8rw7-0 iRorEd"
              disabled={false}
              inheritedStyles=""
              primary={true}
              secondary={false}
              type="submit"
            >
              <button
                aria-label={null}
                className="Button-sc-1ea8rw7-0 iRorEd"
                disabled={false}
                type="submit"
              >
                Submit
              </button>
            </Button>
          </Button>
          <Debug>
            <div
              style={
                Object {
                  "background": "#f6f8fa",
                  "borderRadius": 4,
                  "boxShadow": "0 0 1px  #eee inset",
                  "margin": "3rem 0",
                }
              }
            >
              <div
                style={
                  Object {
                    "background": "#555",
                    "borderTopLeftRadius": 4,
                    "borderTopRightRadius": 4,
                    "color": "#fff",
                    "fontSize": 11,
                    "fontWeight": 500,
                    "letterSpacing": "1px",
                    "padding": ".5rem",
                    "textTransform": "uppercase",
                  }
                }
              >
                Debug Mode - Form State
              </div>
              <pre
                style={
                  Object {
                    "fontSize": 12,
                    "overflowX": "scroll",
                    "padding": ".25rem .5rem",
                  }
                }
              >
                {
  "values": {
    "email": "",
    "username": "",
    "typeOfUser": ""
  },
  "errors": {},
  "touched": {},
  "isSubmitting": false,
  "isValidating": false,
  "submitCount": 0,
  "dirty": false,
  "isValid": false,
  "initialValues": {
    "email": "",
    "username": "",
    "typeOfUser": ""
  },
  "validateOnChange": true,
  "validateOnBlur": true
}
              </pre>
            </div>
          </Debug>
        </form>
      </Component>
    </Form>
  </Formik>
</Form>
`;

exports[`Form Component should render input field with yupValidationSchema 1`] = `
<Form
  action="/"
  className=""
  debug={true}
  formWrapperProps={Object {}}
  initialValues={
    Object {
      "email": "",
      "typeOfUser": "",
      "username": "",
    }
  }
  validate={[Function]}
  validateOnBlur={true}
  validateOnChange={true}
  validationSchema={
    Object {
      "email": Object {
        "email": "Invalid email format",
        "max": Array [
          30,
          "Max reached",
        ],
        "required": "Required",
      },
      "username": Object {
        "max": Array [
          15,
          "Max limit reached",
        ],
        "required": "User name Required",
      },
    }
  }
  yupValidationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": false,
      "_nodes": Array [
        "username",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "username": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
            "required": false,
          },
          "_mutate": false,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
>
  <Formik
    enableReinitialize={false}
    initialValues={
      Object {
        "email": "",
        "typeOfUser": "",
        "username": "",
      }
    }
    isInitialValid={false}
    render={[Function]}
    validate={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": false,
        "_nodes": Array [
          "username",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "username": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "min": true,
              "required": false,
            },
            "_mutate": false,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    <Form
      noValidate={true}
    >
      <Component
        formik={
          Object {
            "dirty": false,
            "errors": Object {},
            "handleBlur": [Function],
            "handleChange": [Function],
            "handleReset": [Function],
            "handleSubmit": [Function],
            "initialValues": Object {
              "email": "",
              "typeOfUser": "",
              "username": "",
            },
            "isSubmitting": false,
            "isValid": false,
            "isValidating": false,
            "registerField": [Function],
            "resetForm": [Function],
            "setError": [Function],
            "setErrors": [Function],
            "setFieldError": [Function],
            "setFieldTouched": [Function],
            "setFieldValue": [Function],
            "setFormikState": [Function],
            "setStatus": [Function],
            "setSubmitting": [Function],
            "setTouched": [Function],
            "setValues": [Function],
            "status": undefined,
            "submitCount": 0,
            "submitForm": [Function],
            "touched": Object {},
            "unregisterField": [Function],
            "validate": [Function],
            "validateField": [Function],
            "validateForm": [Function],
            "validateOnBlur": true,
            "validateOnChange": true,
            "validationSchema": ObjectSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_defaultDefault": [Function],
              "_deps": Array [],
              "_excludedEdges": Array [],
              "_exclusive": Object {},
              "_mutate": false,
              "_nodes": Array [
                "username",
              ],
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "object",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "fields": Object {
                "username": StringSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_deps": Array [],
                  "_exclusive": Object {
                    "max": true,
                    "min": true,
                    "required": false,
                  },
                  "_mutate": false,
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "string",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                },
              },
              "tests": Array [],
              "transforms": Array [
                [Function],
              ],
            },
            "values": Object {
              "email": "",
              "typeOfUser": "",
              "username": "",
            },
          }
        }
        noValidate={true}
      >
        <form
          noValidate={true}
          onReset={[Function]}
          onSubmit={[Function]}
        >
          <div>
            <FieldInput
              label="User Name"
              name="username"
              type="text"
            >
              <FieldInput
                className="FieldInput-sc-1g6jjxa-0 gGDhvv"
                fieldProps={Object {}}
                label="User Name"
                labelProps={Object {}}
                name="username"
                placeholder=""
                type="text"
                value=""
              >
                <div
                  className="FieldInput-sc-1g6jjxa-0 gGDhvv"
                >
                  <Label
                    className=""
                  >
                    <label
                      className=""
                    >
                      User Name
                    </label>
                  </Label>
                  <FormikConnect(FieldInner)
                    name="username"
                    render={[Function]}
                    type="text"
                  >
                    <FieldInner
                      formik={
                        Object {
                          "dirty": false,
                          "errors": Object {},
                          "handleBlur": [Function],
                          "handleChange": [Function],
                          "handleReset": [Function],
                          "handleSubmit": [Function],
                          "initialValues": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                          "isSubmitting": false,
                          "isValid": false,
                          "isValidating": false,
                          "registerField": [Function],
                          "resetForm": [Function],
                          "setError": [Function],
                          "setErrors": [Function],
                          "setFieldError": [Function],
                          "setFieldTouched": [Function],
                          "setFieldValue": [Function],
                          "setFormikState": [Function],
                          "setStatus": [Function],
                          "setSubmitting": [Function],
                          "setTouched": [Function],
                          "setValues": [Function],
                          "status": undefined,
                          "submitCount": 0,
                          "submitForm": [Function],
                          "touched": Object {},
                          "unregisterField": [Function],
                          "validate": [Function],
                          "validateField": [Function],
                          "validateForm": [Function],
                          "validateOnBlur": true,
                          "validateOnChange": true,
                          "validationSchema": ObjectSchema {
                            "_blacklist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "_conditions": Array [],
                            "_defaultDefault": [Function],
                            "_deps": Array [],
                            "_excludedEdges": Array [],
                            "_exclusive": Object {},
                            "_mutate": false,
                            "_nodes": Array [
                              "username",
                            ],
                            "_options": Object {
                              "abortEarly": true,
                              "recursive": true,
                            },
                            "_type": "object",
                            "_typeError": [Function],
                            "_whitelist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "fields": Object {
                              "username": StringSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_deps": Array [],
                                "_exclusive": Object {
                                  "max": true,
                                  "min": true,
                                  "required": false,
                                },
                                "_mutate": false,
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "string",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "tests": Array [
                                  [Function],
                                  [Function],
                                  [Function],
                                  [Function],
                                ],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                            },
                            "tests": Array [],
                            "transforms": Array [
                              [Function],
                            ],
                          },
                          "values": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                        }
                      }
                      name="username"
                      render={[Function]}
                      type="text"
                    >
                      <Input
                        name="username"
                        onBlur={[Function]}
                        onChange={[Function]}
                        placeholder=""
                        type="text"
                        value=""
                      >
                        <Input
                          ariaLabel=""
                          className="Input-qknnxd-0 fKPfiK"
                          name="username"
                          onBlur={[Function]}
                          onChange={[Function]}
                          placeholder=""
                          type="text"
                          value=""
                        >
                          <input
                            aria-label=""
                            className="Input-qknnxd-0 fKPfiK"
                            name="username"
                            onBlur={[Function]}
                            onChange={[Function]}
                            placeholder=""
                            type="text"
                            value=""
                          />
                        </Input>
                      </Input>
                    </FieldInner>
                  </FormikConnect(FieldInner)>
                  <FormikConnect(ErrorMessageImpl)
                    component={[Function]}
                    name="username"
                  >
                    <ErrorMessageImpl
                      component={[Function]}
                      formik={
                        Object {
                          "dirty": false,
                          "errors": Object {},
                          "handleBlur": [Function],
                          "handleChange": [Function],
                          "handleReset": [Function],
                          "handleSubmit": [Function],
                          "initialValues": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                          "isSubmitting": false,
                          "isValid": false,
                          "isValidating": false,
                          "registerField": [Function],
                          "resetForm": [Function],
                          "setError": [Function],
                          "setErrors": [Function],
                          "setFieldError": [Function],
                          "setFieldTouched": [Function],
                          "setFieldValue": [Function],
                          "setFormikState": [Function],
                          "setStatus": [Function],
                          "setSubmitting": [Function],
                          "setTouched": [Function],
                          "setValues": [Function],
                          "status": undefined,
                          "submitCount": 0,
                          "submitForm": [Function],
                          "touched": Object {},
                          "unregisterField": [Function],
                          "validate": [Function],
                          "validateField": [Function],
                          "validateForm": [Function],
                          "validateOnBlur": true,
                          "validateOnChange": true,
                          "validationSchema": ObjectSchema {
                            "_blacklist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "_conditions": Array [],
                            "_defaultDefault": [Function],
                            "_deps": Array [],
                            "_excludedEdges": Array [],
                            "_exclusive": Object {},
                            "_mutate": false,
                            "_nodes": Array [
                              "username",
                            ],
                            "_options": Object {
                              "abortEarly": true,
                              "recursive": true,
                            },
                            "_type": "object",
                            "_typeError": [Function],
                            "_whitelist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "fields": Object {
                              "username": StringSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_deps": Array [],
                                "_exclusive": Object {
                                  "max": true,
                                  "min": true,
                                  "required": false,
                                },
                                "_mutate": false,
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "string",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "tests": Array [
                                  [Function],
                                  [Function],
                                  [Function],
                                  [Function],
                                ],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                            },
                            "tests": Array [],
                            "transforms": Array [
                              [Function],
                            ],
                          },
                          "values": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                        }
                      }
                      name="username"
                    />
                  </FormikConnect(ErrorMessageImpl)>
                </div>
              </FieldInput>
            </FieldInput>
          </div>
          <Button
            primary={true}
            type="submit"
          >
            <Button
              ariaLabel=""
              className="Button-sc-1ea8rw7-0 iRorEd"
              disabled={false}
              inheritedStyles=""
              primary={true}
              secondary={false}
              type="submit"
            >
              <button
                aria-label={null}
                className="Button-sc-1ea8rw7-0 iRorEd"
                disabled={false}
                type="submit"
              >
                Submit
              </button>
            </Button>
          </Button>
          <Debug>
            <div
              style={
                Object {
                  "background": "#f6f8fa",
                  "borderRadius": 4,
                  "boxShadow": "0 0 1px  #eee inset",
                  "margin": "3rem 0",
                }
              }
            >
              <div
                style={
                  Object {
                    "background": "#555",
                    "borderTopLeftRadius": 4,
                    "borderTopRightRadius": 4,
                    "color": "#fff",
                    "fontSize": 11,
                    "fontWeight": 500,
                    "letterSpacing": "1px",
                    "padding": ".5rem",
                    "textTransform": "uppercase",
                  }
                }
              >
                Debug Mode - Form State
              </div>
              <pre
                style={
                  Object {
                    "fontSize": 12,
                    "overflowX": "scroll",
                    "padding": ".25rem .5rem",
                  }
                }
              >
                {
  "values": {
    "email": "",
    "username": "",
    "typeOfUser": ""
  },
  "errors": {},
  "touched": {},
  "isSubmitting": false,
  "isValidating": false,
  "submitCount": 0,
  "dirty": false,
  "isValid": false,
  "initialValues": {
    "email": "",
    "username": "",
    "typeOfUser": ""
  },
  "validateOnChange": true,
  "validateOnBlur": true
}
              </pre>
            </div>
          </Debug>
        </form>
      </Component>
    </Form>
  </Formik>
</Form>
`;

exports[`Form Component should render input text field 1`] = `
<Form
  action="/"
  className=""
  debug={true}
  formWrapperProps={Object {}}
  initialValues={
    Object {
      "email": "",
      "typeOfUser": "",
      "username": "",
    }
  }
  validate={[Function]}
  validateOnBlur={true}
  validateOnChange={true}
  validationSchema={
    Object {
      "email": Object {
        "email": "Invalid email format",
        "max": Array [
          30,
          "Max reached",
        ],
        "required": "Required",
      },
      "username": Object {
        "max": Array [
          15,
          "Max limit reached",
        ],
        "required": "User name Required",
      },
    }
  }
  yupValidationSchema={null}
>
  <Formik
    enableReinitialize={false}
    initialValues={
      Object {
        "email": "",
        "typeOfUser": "",
        "username": "",
      }
    }
    isInitialValid={false}
    render={[Function]}
    validate={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": false,
        "_nodes": Array [
          "email",
          "username",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "email": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "required": false,
              "undefined": false,
            },
            "_mutate": false,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
          "username": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "required": false,
            },
            "_mutate": false,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    <Form
      noValidate={true}
    >
      <Component
        formik={
          Object {
            "dirty": false,
            "errors": Object {},
            "handleBlur": [Function],
            "handleChange": [Function],
            "handleReset": [Function],
            "handleSubmit": [Function],
            "initialValues": Object {
              "email": "",
              "typeOfUser": "",
              "username": "",
            },
            "isSubmitting": false,
            "isValid": false,
            "isValidating": false,
            "registerField": [Function],
            "resetForm": [Function],
            "setError": [Function],
            "setErrors": [Function],
            "setFieldError": [Function],
            "setFieldTouched": [Function],
            "setFieldValue": [Function],
            "setFormikState": [Function],
            "setStatus": [Function],
            "setSubmitting": [Function],
            "setTouched": [Function],
            "setValues": [Function],
            "status": undefined,
            "submitCount": 0,
            "submitForm": [Function],
            "touched": Object {},
            "unregisterField": [Function],
            "validate": [Function],
            "validateField": [Function],
            "validateForm": [Function],
            "validateOnBlur": true,
            "validateOnChange": true,
            "validationSchema": ObjectSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_defaultDefault": [Function],
              "_deps": Array [],
              "_excludedEdges": Array [],
              "_exclusive": Object {},
              "_mutate": false,
              "_nodes": Array [
                "email",
                "username",
              ],
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "object",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "fields": Object {
                "email": StringSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_deps": Array [],
                  "_exclusive": Object {
                    "max": true,
                    "required": false,
                    "undefined": false,
                  },
                  "_mutate": false,
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "string",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                },
                "username": StringSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_deps": Array [],
                  "_exclusive": Object {
                    "max": true,
                    "required": false,
                  },
                  "_mutate": false,
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "string",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                },
              },
              "tests": Array [],
              "transforms": Array [
                [Function],
              ],
            },
            "values": Object {
              "email": "",
              "typeOfUser": "",
              "username": "",
            },
          }
        }
        noValidate={true}
      >
        <form
          noValidate={true}
          onReset={[Function]}
          onSubmit={[Function]}
        >
          <div>
            <FieldInput
              label="User Name"
              name="username"
              type="text"
            >
              <FieldInput
                className="FieldInput-sc-1g6jjxa-0 gGDhvv"
                fieldProps={Object {}}
                label="User Name"
                labelProps={Object {}}
                name="username"
                placeholder=""
                type="text"
                value=""
              >
                <div
                  className="FieldInput-sc-1g6jjxa-0 gGDhvv"
                >
                  <Label
                    className=""
                  >
                    <label
                      className=""
                    >
                      User Name
                    </label>
                  </Label>
                  <FormikConnect(FieldInner)
                    name="username"
                    render={[Function]}
                    type="text"
                  >
                    <FieldInner
                      formik={
                        Object {
                          "dirty": false,
                          "errors": Object {},
                          "handleBlur": [Function],
                          "handleChange": [Function],
                          "handleReset": [Function],
                          "handleSubmit": [Function],
                          "initialValues": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                          "isSubmitting": false,
                          "isValid": false,
                          "isValidating": false,
                          "registerField": [Function],
                          "resetForm": [Function],
                          "setError": [Function],
                          "setErrors": [Function],
                          "setFieldError": [Function],
                          "setFieldTouched": [Function],
                          "setFieldValue": [Function],
                          "setFormikState": [Function],
                          "setStatus": [Function],
                          "setSubmitting": [Function],
                          "setTouched": [Function],
                          "setValues": [Function],
                          "status": undefined,
                          "submitCount": 0,
                          "submitForm": [Function],
                          "touched": Object {},
                          "unregisterField": [Function],
                          "validate": [Function],
                          "validateField": [Function],
                          "validateForm": [Function],
                          "validateOnBlur": true,
                          "validateOnChange": true,
                          "validationSchema": ObjectSchema {
                            "_blacklist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "_conditions": Array [],
                            "_defaultDefault": [Function],
                            "_deps": Array [],
                            "_excludedEdges": Array [],
                            "_exclusive": Object {},
                            "_mutate": false,
                            "_nodes": Array [
                              "email",
                              "username",
                            ],
                            "_options": Object {
                              "abortEarly": true,
                              "recursive": true,
                            },
                            "_type": "object",
                            "_typeError": [Function],
                            "_whitelist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "fields": Object {
                              "email": StringSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_deps": Array [],
                                "_exclusive": Object {
                                  "max": true,
                                  "required": false,
                                  "undefined": false,
                                },
                                "_mutate": false,
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "string",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "tests": Array [
                                  [Function],
                                  [Function],
                                  [Function],
                                  [Function],
                                ],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                              "username": StringSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_deps": Array [],
                                "_exclusive": Object {
                                  "max": true,
                                  "required": false,
                                },
                                "_mutate": false,
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "string",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "tests": Array [
                                  [Function],
                                  [Function],
                                  [Function],
                                ],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                            },
                            "tests": Array [],
                            "transforms": Array [
                              [Function],
                            ],
                          },
                          "values": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                        }
                      }
                      name="username"
                      render={[Function]}
                      type="text"
                    >
                      <Input
                        name="username"
                        onBlur={[Function]}
                        onChange={[Function]}
                        placeholder=""
                        type="text"
                        value=""
                      >
                        <Input
                          ariaLabel=""
                          className="Input-qknnxd-0 fKPfiK"
                          name="username"
                          onBlur={[Function]}
                          onChange={[Function]}
                          placeholder=""
                          type="text"
                          value=""
                        >
                          <input
                            aria-label=""
                            className="Input-qknnxd-0 fKPfiK"
                            name="username"
                            onBlur={[Function]}
                            onChange={[Function]}
                            placeholder=""
                            type="text"
                            value=""
                          />
                        </Input>
                      </Input>
                    </FieldInner>
                  </FormikConnect(FieldInner)>
                  <FormikConnect(ErrorMessageImpl)
                    component={[Function]}
                    name="username"
                  >
                    <ErrorMessageImpl
                      component={[Function]}
                      formik={
                        Object {
                          "dirty": false,
                          "errors": Object {},
                          "handleBlur": [Function],
                          "handleChange": [Function],
                          "handleReset": [Function],
                          "handleSubmit": [Function],
                          "initialValues": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                          "isSubmitting": false,
                          "isValid": false,
                          "isValidating": false,
                          "registerField": [Function],
                          "resetForm": [Function],
                          "setError": [Function],
                          "setErrors": [Function],
                          "setFieldError": [Function],
                          "setFieldTouched": [Function],
                          "setFieldValue": [Function],
                          "setFormikState": [Function],
                          "setStatus": [Function],
                          "setSubmitting": [Function],
                          "setTouched": [Function],
                          "setValues": [Function],
                          "status": undefined,
                          "submitCount": 0,
                          "submitForm": [Function],
                          "touched": Object {},
                          "unregisterField": [Function],
                          "validate": [Function],
                          "validateField": [Function],
                          "validateForm": [Function],
                          "validateOnBlur": true,
                          "validateOnChange": true,
                          "validationSchema": ObjectSchema {
                            "_blacklist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "_conditions": Array [],
                            "_defaultDefault": [Function],
                            "_deps": Array [],
                            "_excludedEdges": Array [],
                            "_exclusive": Object {},
                            "_mutate": false,
                            "_nodes": Array [
                              "email",
                              "username",
                            ],
                            "_options": Object {
                              "abortEarly": true,
                              "recursive": true,
                            },
                            "_type": "object",
                            "_typeError": [Function],
                            "_whitelist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "fields": Object {
                              "email": StringSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_deps": Array [],
                                "_exclusive": Object {
                                  "max": true,
                                  "required": false,
                                  "undefined": false,
                                },
                                "_mutate": false,
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "string",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "tests": Array [
                                  [Function],
                                  [Function],
                                  [Function],
                                  [Function],
                                ],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                              "username": StringSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_deps": Array [],
                                "_exclusive": Object {
                                  "max": true,
                                  "required": false,
                                },
                                "_mutate": false,
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "string",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "tests": Array [
                                  [Function],
                                  [Function],
                                  [Function],
                                ],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                            },
                            "tests": Array [],
                            "transforms": Array [
                              [Function],
                            ],
                          },
                          "values": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                        }
                      }
                      name="username"
                    />
                  </FormikConnect(ErrorMessageImpl)>
                </div>
              </FieldInput>
            </FieldInput>
          </div>
          <Button
            primary={true}
            type="submit"
          >
            <Button
              ariaLabel=""
              className="Button-sc-1ea8rw7-0 iRorEd"
              disabled={false}
              inheritedStyles=""
              primary={true}
              secondary={false}
              type="submit"
            >
              <button
                aria-label={null}
                className="Button-sc-1ea8rw7-0 iRorEd"
                disabled={false}
                type="submit"
              >
                Submit
              </button>
            </Button>
          </Button>
          <Debug>
            <div
              style={
                Object {
                  "background": "#f6f8fa",
                  "borderRadius": 4,
                  "boxShadow": "0 0 1px  #eee inset",
                  "margin": "3rem 0",
                }
              }
            >
              <div
                style={
                  Object {
                    "background": "#555",
                    "borderTopLeftRadius": 4,
                    "borderTopRightRadius": 4,
                    "color": "#fff",
                    "fontSize": 11,
                    "fontWeight": 500,
                    "letterSpacing": "1px",
                    "padding": ".5rem",
                    "textTransform": "uppercase",
                  }
                }
              >
                Debug Mode - Form State
              </div>
              <pre
                style={
                  Object {
                    "fontSize": 12,
                    "overflowX": "scroll",
                    "padding": ".25rem .5rem",
                  }
                }
              >
                {
  "values": {
    "email": "",
    "username": "",
    "typeOfUser": ""
  },
  "errors": {},
  "touched": {},
  "isSubmitting": false,
  "isValidating": false,
  "submitCount": 0,
  "dirty": false,
  "isValid": false,
  "initialValues": {
    "email": "",
    "username": "",
    "typeOfUser": ""
  },
  "validateOnChange": true,
  "validateOnBlur": true
}
              </pre>
            </div>
          </Debug>
        </form>
      </Component>
    </Form>
  </Formik>
</Form>
`;

exports[`Form Component should render select field 1`] = `
<Form
  action="/"
  className=""
  debug={true}
  formWrapperProps={Object {}}
  initialValues={
    Object {
      "email": "",
      "typeOfUser": "",
      "username": "",
    }
  }
  validate={[Function]}
  validateOnBlur={true}
  validateOnChange={true}
  validationSchema={
    Object {
      "email": Object {
        "email": "Invalid email format",
        "max": Array [
          30,
          "Max reached",
        ],
        "required": "Required",
      },
      "username": Object {
        "max": Array [
          15,
          "Max limit reached",
        ],
        "required": "User name Required",
      },
    }
  }
  yupValidationSchema={null}
>
  <Formik
    enableReinitialize={false}
    initialValues={
      Object {
        "email": "",
        "typeOfUser": "",
        "username": "",
      }
    }
    isInitialValid={false}
    render={[Function]}
    validate={[Function]}
    validateOnBlur={true}
    validateOnChange={true}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": false,
        "_nodes": Array [
          "email",
          "username",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "email": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "required": false,
              "undefined": false,
            },
            "_mutate": false,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
          "username": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "required": false,
            },
            "_mutate": false,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
      }
    }
  >
    <Form
      noValidate={true}
    >
      <Component
        formik={
          Object {
            "dirty": false,
            "errors": Object {},
            "handleBlur": [Function],
            "handleChange": [Function],
            "handleReset": [Function],
            "handleSubmit": [Function],
            "initialValues": Object {
              "email": "",
              "typeOfUser": "",
              "username": "",
            },
            "isSubmitting": false,
            "isValid": false,
            "isValidating": false,
            "registerField": [Function],
            "resetForm": [Function],
            "setError": [Function],
            "setErrors": [Function],
            "setFieldError": [Function],
            "setFieldTouched": [Function],
            "setFieldValue": [Function],
            "setFormikState": [Function],
            "setStatus": [Function],
            "setSubmitting": [Function],
            "setTouched": [Function],
            "setValues": [Function],
            "status": undefined,
            "submitCount": 0,
            "submitForm": [Function],
            "touched": Object {},
            "unregisterField": [Function],
            "validate": [Function],
            "validateField": [Function],
            "validateForm": [Function],
            "validateOnBlur": true,
            "validateOnChange": true,
            "validationSchema": ObjectSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_defaultDefault": [Function],
              "_deps": Array [],
              "_excludedEdges": Array [],
              "_exclusive": Object {},
              "_mutate": false,
              "_nodes": Array [
                "email",
                "username",
              ],
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "object",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "fields": Object {
                "email": StringSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_deps": Array [],
                  "_exclusive": Object {
                    "max": true,
                    "required": false,
                    "undefined": false,
                  },
                  "_mutate": false,
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "string",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                },
                "username": StringSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_deps": Array [],
                  "_exclusive": Object {
                    "max": true,
                    "required": false,
                  },
                  "_mutate": false,
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "string",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                },
              },
              "tests": Array [],
              "transforms": Array [
                [Function],
              ],
            },
            "values": Object {
              "email": "",
              "typeOfUser": "",
              "username": "",
            },
          }
        }
        noValidate={true}
      >
        <form
          noValidate={true}
          onReset={[Function]}
          onSubmit={[Function]}
        >
          <div>
            <FieldSelect
              label="Type of user"
              name="typeOfUser"
              options={
                Array [
                  "Admin",
                  "Read Only",
                ]
              }
            >
              <FieldSelect
                className="FieldSelect-g26khr-0 jVDXBH"
                fieldProps={Object {}}
                label="Type of user"
                labelProps={Object {}}
                name="typeOfUser"
                options={
                  Array [
                    "Admin",
                    "Read Only",
                  ]
                }
              >
                <div
                  className="FieldSelect-g26khr-0 jVDXBH"
                >
                  <Label
                    className=""
                  >
                    <label
                      className=""
                    >
                      Type of user
                    </label>
                  </Label>
                  <FormikConnect(FieldInner)
                    component="select"
                    name="typeOfUser"
                    render={[Function]}
                  >
                    <FieldInner
                      component="select"
                      formik={
                        Object {
                          "dirty": false,
                          "errors": Object {},
                          "handleBlur": [Function],
                          "handleChange": [Function],
                          "handleReset": [Function],
                          "handleSubmit": [Function],
                          "initialValues": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                          "isSubmitting": false,
                          "isValid": false,
                          "isValidating": false,
                          "registerField": [Function],
                          "resetForm": [Function],
                          "setError": [Function],
                          "setErrors": [Function],
                          "setFieldError": [Function],
                          "setFieldTouched": [Function],
                          "setFieldValue": [Function],
                          "setFormikState": [Function],
                          "setStatus": [Function],
                          "setSubmitting": [Function],
                          "setTouched": [Function],
                          "setValues": [Function],
                          "status": undefined,
                          "submitCount": 0,
                          "submitForm": [Function],
                          "touched": Object {},
                          "unregisterField": [Function],
                          "validate": [Function],
                          "validateField": [Function],
                          "validateForm": [Function],
                          "validateOnBlur": true,
                          "validateOnChange": true,
                          "validationSchema": ObjectSchema {
                            "_blacklist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "_conditions": Array [],
                            "_defaultDefault": [Function],
                            "_deps": Array [],
                            "_excludedEdges": Array [],
                            "_exclusive": Object {},
                            "_mutate": false,
                            "_nodes": Array [
                              "email",
                              "username",
                            ],
                            "_options": Object {
                              "abortEarly": true,
                              "recursive": true,
                            },
                            "_type": "object",
                            "_typeError": [Function],
                            "_whitelist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "fields": Object {
                              "email": StringSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_deps": Array [],
                                "_exclusive": Object {
                                  "max": true,
                                  "required": false,
                                  "undefined": false,
                                },
                                "_mutate": false,
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "string",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "tests": Array [
                                  [Function],
                                  [Function],
                                  [Function],
                                  [Function],
                                ],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                              "username": StringSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_deps": Array [],
                                "_exclusive": Object {
                                  "max": true,
                                  "required": false,
                                },
                                "_mutate": false,
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "string",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "tests": Array [
                                  [Function],
                                  [Function],
                                  [Function],
                                ],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                            },
                            "tests": Array [],
                            "transforms": Array [
                              [Function],
                            ],
                          },
                          "values": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                        }
                      }
                      name="typeOfUser"
                      render={[Function]}
                    >
                      <Select
                        name="typeOfUser"
                        onBlur={[Function]}
                        onChange={[Function]}
                        options={
                          Array [
                            "Admin",
                            "Read Only",
                          ]
                        }
                        value=""
                      >
                        <Select
                          className="Select-sc-1x42827-0 iHwOuf"
                          disabled={false}
                          name="typeOfUser"
                          onBlur={[Function]}
                          onChange={[Function]}
                          options={
                            Array [
                              "Admin",
                              "Read Only",
                            ]
                          }
                          placeholder=""
                          selectedOption=""
                          value=""
                        >
                          <select
                            className="Select-sc-1x42827-0 iHwOuf"
                            disabled={false}
                            name="typeOfUser"
                            onBlur={[Function]}
                            onChange={[Function]}
                            value=""
                          >
                            <option
                              key="Admin"
                              value="Admin"
                            >
                              Admin
                            </option>
                            <option
                              key="Read Only"
                              value="Read Only"
                            >
                              Read Only
                            </option>
                          </select>
                        </Select>
                      </Select>
                    </FieldInner>
                  </FormikConnect(FieldInner)>
                  <FormikConnect(ErrorMessageImpl)
                    component={[Function]}
                    name="typeOfUser"
                  >
                    <ErrorMessageImpl
                      component={[Function]}
                      formik={
                        Object {
                          "dirty": false,
                          "errors": Object {},
                          "handleBlur": [Function],
                          "handleChange": [Function],
                          "handleReset": [Function],
                          "handleSubmit": [Function],
                          "initialValues": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                          "isSubmitting": false,
                          "isValid": false,
                          "isValidating": false,
                          "registerField": [Function],
                          "resetForm": [Function],
                          "setError": [Function],
                          "setErrors": [Function],
                          "setFieldError": [Function],
                          "setFieldTouched": [Function],
                          "setFieldValue": [Function],
                          "setFormikState": [Function],
                          "setStatus": [Function],
                          "setSubmitting": [Function],
                          "setTouched": [Function],
                          "setValues": [Function],
                          "status": undefined,
                          "submitCount": 0,
                          "submitForm": [Function],
                          "touched": Object {},
                          "unregisterField": [Function],
                          "validate": [Function],
                          "validateField": [Function],
                          "validateForm": [Function],
                          "validateOnBlur": true,
                          "validateOnChange": true,
                          "validationSchema": ObjectSchema {
                            "_blacklist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "_conditions": Array [],
                            "_defaultDefault": [Function],
                            "_deps": Array [],
                            "_excludedEdges": Array [],
                            "_exclusive": Object {},
                            "_mutate": false,
                            "_nodes": Array [
                              "email",
                              "username",
                            ],
                            "_options": Object {
                              "abortEarly": true,
                              "recursive": true,
                            },
                            "_type": "object",
                            "_typeError": [Function],
                            "_whitelist": RefSet {
                              "list": Set {},
                              "refs": Map {},
                            },
                            "fields": Object {
                              "email": StringSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_deps": Array [],
                                "_exclusive": Object {
                                  "max": true,
                                  "required": false,
                                  "undefined": false,
                                },
                                "_mutate": false,
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "string",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "tests": Array [
                                  [Function],
                                  [Function],
                                  [Function],
                                  [Function],
                                ],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                              "username": StringSchema {
                                "_blacklist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "_conditions": Array [],
                                "_deps": Array [],
                                "_exclusive": Object {
                                  "max": true,
                                  "required": false,
                                },
                                "_mutate": false,
                                "_options": Object {
                                  "abortEarly": true,
                                  "recursive": true,
                                },
                                "_type": "string",
                                "_typeError": [Function],
                                "_whitelist": RefSet {
                                  "list": Set {},
                                  "refs": Map {},
                                },
                                "tests": Array [
                                  [Function],
                                  [Function],
                                  [Function],
                                ],
                                "transforms": Array [
                                  [Function],
                                ],
                              },
                            },
                            "tests": Array [],
                            "transforms": Array [
                              [Function],
                            ],
                          },
                          "values": Object {
                            "email": "",
                            "typeOfUser": "",
                            "username": "",
                          },
                        }
                      }
                      name="typeOfUser"
                    />
                  </FormikConnect(ErrorMessageImpl)>
                </div>
              </FieldSelect>
            </FieldSelect>
          </div>
          <Button
            primary={true}
            type="submit"
          >
            <Button
              ariaLabel=""
              className="Button-sc-1ea8rw7-0 iRorEd"
              disabled={false}
              inheritedStyles=""
              primary={true}
              secondary={false}
              type="submit"
            >
              <button
                aria-label={null}
                className="Button-sc-1ea8rw7-0 iRorEd"
                disabled={false}
                type="submit"
              >
                Submit
              </button>
            </Button>
          </Button>
          <Debug>
            <div
              style={
                Object {
                  "background": "#f6f8fa",
                  "borderRadius": 4,
                  "boxShadow": "0 0 1px  #eee inset",
                  "margin": "3rem 0",
                }
              }
            >
              <div
                style={
                  Object {
                    "background": "#555",
                    "borderTopLeftRadius": 4,
                    "borderTopRightRadius": 4,
                    "color": "#fff",
                    "fontSize": 11,
                    "fontWeight": 500,
                    "letterSpacing": "1px",
                    "padding": ".5rem",
                    "textTransform": "uppercase",
                  }
                }
              >
                Debug Mode - Form State
              </div>
              <pre
                style={
                  Object {
                    "fontSize": 12,
                    "overflowX": "scroll",
                    "padding": ".25rem .5rem",
                  }
                }
              >
                {
  "values": {
    "email": "",
    "username": "",
    "typeOfUser": ""
  },
  "errors": {},
  "touched": {},
  "isSubmitting": false,
  "isValidating": false,
  "submitCount": 0,
  "dirty": false,
  "isValid": false,
  "initialValues": {
    "email": "",
    "username": "",
    "typeOfUser": ""
  },
  "validateOnChange": true,
  "validateOnBlur": true
}
              </pre>
            </div>
          </Debug>
        </form>
      </Component>
    </Form>
  </Formik>
</Form>
`;

exports[`Form Component should render select tag correctly 1`] = `
<Formik
  enableReinitialize={false}
  initialValues={
    Object {
      "email": "",
      "typeOfUser": "",
      "username": "",
    }
  }
  isInitialValid={false}
  render={[Function]}
  validate={[Function]}
  validateOnBlur={true}
  validateOnChange={true}
  validationSchema={
    ObjectSchema {
      "_blacklist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "_conditions": Array [],
      "_defaultDefault": [Function],
      "_deps": Array [],
      "_excludedEdges": Array [],
      "_exclusive": Object {},
      "_mutate": false,
      "_nodes": Array [
        "email",
        "username",
      ],
      "_options": Object {
        "abortEarly": true,
        "recursive": true,
      },
      "_type": "object",
      "_typeError": [Function],
      "_whitelist": RefSet {
        "list": Set {},
        "refs": Map {},
      },
      "fields": Object {
        "email": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": false,
            "undefined": false,
          },
          "_mutate": false,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
        "username": StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": false,
          },
          "_mutate": false,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        },
      },
      "tests": Array [],
      "transforms": Array [
        [Function],
      ],
    }
  }
/>
`;
